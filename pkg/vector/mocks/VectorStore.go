// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	vector "github.com/chankung9/go-ai-knowledge-search-system/pkg/vector"
	mock "github.com/stretchr/testify/mock"
)

// VectorStore is an autogenerated mock type for the VectorStore type
type VectorStore struct {
	mock.Mock
}

// Insert provides a mock function with given fields: record
func (_m *VectorStore) Insert(record vector.VectorRecord) error {
	ret := _m.Called(record)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(vector.VectorRecord) error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: query, k
func (_m *VectorStore) Query(query vector.Vector, k int) ([]vector.SimilarityResult, error) {
	ret := _m.Called(query, k)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []vector.SimilarityResult
	var r1 error
	if rf, ok := ret.Get(0).(func(vector.Vector, int) ([]vector.SimilarityResult, error)); ok {
		return rf(query, k)
	}
	if rf, ok := ret.Get(0).(func(vector.Vector, int) []vector.SimilarityResult); ok {
		r0 = rf(query, k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vector.SimilarityResult)
		}
	}

	if rf, ok := ret.Get(1).(func(vector.Vector, int) error); ok {
		r1 = rf(query, k)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVectorStore creates a new instance of VectorStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVectorStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *VectorStore {
	mock := &VectorStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
